--- loop4.py	2022-11-02 10:35:15.054206925 +0100
+++ loop5.py	2022-11-02 10:40:49.104560788 +0100
@@ -4,7 +4,7 @@
 
 
 class Loop:
-    """Loop v4"""
+    """Loop v5"""
 
     _instance: "Loop" = None
 
@@ -20,28 +20,43 @@
 
     def run_step(self) -> None:
         """Run a single step/tick of the loop"""
+        # execute all current known handles only.
+        # not the ones added while running the handle callbacks
+        scheduled = self._scheduled.copy()
+        self._scheduled.clear()
+
         try:
-            handle = self._scheduled.pop(0)  # fifo: extract first item
+            handle = scheduled.pop(0)  # fifo: extract first item
             while handle is not None:
                 handle.run()
-                handle = self._scheduled.pop(0)  # fifo: extract first item
+                handle = scheduled.pop(0)  # fifo: extract first item
         except IndexError:
             # list is empty
             pass
 
-    def run(self, coroutine: Generator[Any, None, Any]) -> Any:
-        """Run a coroutine"""
+        # a shorter and even more smarter version
+        #
+        # for _ in range(len(self._scheduled)):
+        #     handle = self._scheduled.pop(0)  # fifo: extract first item
+        #     handle.run()
+
+    def run_loop(self) -> None:
+        """Run the loop"""
         self._running = True
         step = 1
         while self._running:
             print("Loop step", step, self._scheduled)
-            try:
-                self.run_step()
-                next(coroutine)
-                step += 1
-            except StopIteration as e:
-                self._running = False
-                return e.value
+            self.run_step()
+            step += 1
+
+    def run(self, coroutine: Generator[Any, None, Any]) -> Any:
+        """Run a coroutine until it is done/completed"""
+        from task import Task  # avoid cyclic dependency
+
+        task = Task(coroutine, "Initial Task")
+        task.add_done_callback(self._done)
+        self.run_loop()
+        return task.result()
 
     def stop(self) -> None:
         """Stop running the loop"""
@@ -50,3 +65,6 @@
     def schedule(self, name: str, callback: Callable, *args: Any) -> None:
         """Schedule a callback for the next step/tick"""
         self._scheduled.append(Handle(name, callback, args))
+
+    def _done(self, _future) -> None:
+        self.stop()
